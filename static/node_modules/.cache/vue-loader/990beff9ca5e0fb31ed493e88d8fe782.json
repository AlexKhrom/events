{"remainingRequest":"/Users/mac/Desktop/events/static/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/mac/Desktop/events/static/src/components/ListEvents.vue?vue&type=style&index=0&id=7171a607&scoped=true&lang=css&","dependencies":[{"path":"/Users/mac/Desktop/events/static/src/components/ListEvents.vue","mtime":1657700589673},{"path":"/Users/mac/Desktop/events/static/node_modules/css-loader/dist/cjs.js","mtime":1656160197442},{"path":"/Users/mac/Desktop/events/static/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1656160198444},{"path":"/Users/mac/Desktop/events/static/node_modules/postcss-loader/src/index.js","mtime":1656160197665},{"path":"/Users/mac/Desktop/events/static/node_modules/cache-loader/dist/cjs.js","mtime":1656160197065},{"path":"/Users/mac/Desktop/events/static/node_modules/vue-loader/lib/index.js","mtime":1656160198005}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKLnBpY2tlciB7CiAgY29sb3I6IHdoaXRlOwogIHRvcDogMDsKICBib3R0b206IDA7CiAgcmlnaHQ6IDA7CiAgbGVmdDogMDsKICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDAsIDAsIDAsIDAuNSk7CiAgcG9zaXRpb246IGZpeGVkOwogIHotaW5kZXg6IDEwMDsKICBvdmVyZmxvdzogYXV0bzsKICBkaXNwbGF5OiBmbGV4OwogIHBhZGRpbmctdG9wOiA4MHB4Owp9CgoucGlja2VyX19jb250ZW50IHsKICAvKm92ZXJmbG93LXk6IHNjcm9sbDsqLwogIGRpc3BsYXk6IGJsb2NrOwogIHdpZHRoOiAyOTBweDsKICBtYXJnaW46IGF1dG87CgogIG1pbi1oZWlnaHQ6IDEwMCU7CiAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuOwogIHotaW5kZXg6IDIwMDsKfQo="},{"version":3,"sources":["ListEvents.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAySA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA","file":"ListEvents.vue","sourceRoot":"src/components","sourcesContent":["<!--evets = []event{-->\n<!--  dt: date of creat event-->\n<!--  title: name of event-->\n<!--  timeStart: date of start doing smth-->\n<!--  timeEnd: date of finish doing smth-->\n<!--}-->\n<template>\n  <div>\n    <template v-if=\"isChangeEvent\">\n      <div class=\"picker\" @click=\"isChangeEvent=false\">\n        <div class=\"picker__content\" @click.stop>\n          <slot>\n            <v-row justify=\"space-around\">\n              <v-col>\n                <v-time-picker\n                    format=\"24hr\"\n                    v-model=\"timePicker\"\n                ></v-time-picker>\n              </v-col>\n              <v-col>\n                <v-date-picker\n                    v-model=\"datePicker\"\n                    color=\"primary lighten-1\"\n                ></v-date-picker>\n              </v-col>\n              <v-col>\n                <v-btn class=\"mb-4\" width=\"290px\"\n                       @click=\"saveEventChanges\"\n                       color=\"primary\">save\n                </v-btn>\n              </v-col>\n            </v-row>\n          </slot>\n        </div>\n      </div>\n    </template>\n\n    <template v-if=\"isChangeEventWithDuration\">\n      <div class=\"picker\" @click=\"isChangeEventWithDuration=false\">\n        <div class=\"picker__content\" @click.stop>\n          <slot>\n            <div>\n              <h1>Change your event:</h1>\n              <v-row\n                  justify=\"space-around\"\n                  align=\"center\"\n              >\n                <v-col style=\"width: 350px; flex: 0 1 auto;\">\n                  <h2>Start:</h2>\n                  <v-time-picker\n                      format=\"24hr\"\n                      v-model=\"startEventTime\"\n                      :max=\"endEventTime\"\n                  ></v-time-picker>\n                </v-col>\n                <v-col style=\"width: 350px; flex: 0 1 auto;\">\n                  <h2>End:</h2>\n                  <v-time-picker\n                      format=\"24hr\"\n                      v-model=\"endEventTime\"\n                      :min=\"startEventTime\"\n                  ></v-time-picker>\n                </v-col>\n                <v-col>\n                  <v-date-picker\n                      v-model=\"datePicker\"\n                      color=\"primary lighten-1\"\n                  ></v-date-picker>\n                </v-col>\n                <v-col>\n                  <v-btn class=\"mb-2\" width=\"290px\"\n                         @click=\"saveEventWithDurationChanges\"\n                         height=\"50px\"\n                         color=\"primary\">save\n                  </v-btn>\n                </v-col>\n              </v-row>\n            </div>\n          </slot>\n        </div>\n      </div>\n    </template>\n\n\n    <div v-for=\"(event,index) in this.$store.state.events\"\n         :key=\"event.title+event.dt\"\n    >\n      <div v-if=\"isNewDay(index)\" style=\"margin-top: 20px;color: #555555\">{{ new Date(event.dt) | moment }}</div>\n      <div\n          style=\"display: flex;justify-content: space-between;margin-top: 20px;padding:5px;\">\n        <div>\n          <div :style=\"event.deleted?'opacity: 0.5':''\"\n               style=\"font-size: 18px;text-transform: capitalize;display: flex;align-items: center;\">{{ event.title }}\n          </div>\n          <span v-if=\"!event.deleted\" style=\"color: #555;font-size: 11px;display: block\">{{\n              getHourAndMinutes(event)\n            }}</span>\n        </div>\n        <div>\n          <span v-if=\"event.deleted\" style=\"color: #555;font-size: 12px;padding-right: 10px\">{{\n              event.waitSeconds\n            }}—Å</span>\n          <span v-if=\"event.timeStart!==undefined&&!event.deleted\" style=\"color: #555;font-size: 14px;\">\n            {{ printEventDuration(event) }}\n          </span>\n          <v-btn v-if=\"!event.deleted\" @click=\"changeEvent(event.dt)\" icon>‚úèÔ∏è</v-btn>\n          <v-btn v-if=\"event.deleted\" @click=\"camebackEvent(event.dt)\" text small>–≤–µ—Ä–Ω—É—Ç—å ‚Ü©Ô∏é</v-btn>\n          <v-btn v-else @click=\"deleteEvent(event.dt)\" icon>üóë</v-btn>\n        </div>\n      </div>\n      <div :style=\"{border: '2px solid '+borderColorForEvent(index),width: calcTimePercent(index) +'%'}\"\n      ></div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport moment from \"moment\";\n\n\nexport default {\n  name: \"listEvents\",\n  filters: {\n    moment(date) {\n      return moment(date).format(\"D MMMM\");\n    },\n  },\n  data() {\n    return {\n      isChangeEvent: false,\n      isChangeEventWithDuration: false,\n      startEventTime: null,\n      endEventTime: null,\n      timePicker: \"\",\n      percentOfEventTime: 0,\n      datePicker: (new Date(Date.now() - (new Date()).getTimezoneOffset() * 60000)).toISOString().substr(0, 10),\n\n    }\n  },\n  computed: {\n    eventsArray() {\n      // console.log(this.$store.state.events.slice().sort((a, b) =>\n      //     a.dt < b.dt ? 1 : -1))\n      return this.$store.state.events.slice().sort((a, b) =>\n          a.dt < b.dt ? 1 : -1)\n    }\n  },\n  methods: {\n    deleteEvent(id) {\n      let index = this.findIndexEvents(id)\n      let event = this.$store.state.events[index]\n\n      // console.log(\"index = \", index)\n      // console.log({event})\n\n      let waitSeconds = 3\n      event.waitSeconds = waitSeconds\n      let intervalId = setInterval(() => {\n        if (!event.deleted) {\n          clearInterval(intervalId)\n          localStorage.setItem('events', JSON.stringify(this.$store.state.events))\n          this.$forceUpdate()\n          return\n        }\n        if (--waitSeconds < 0) {\n          clearInterval(intervalId);\n          let index = this.findIndexEvents(id)\n          this.$store.state.events.splice(index, 1)\n        } else {\n          event.waitSeconds = waitSeconds\n        }\n        this.$forceUpdate()\n      }, 1000);\n\n      // this.$store.state.events.splice(index, 1)\n\n      event.deleted = Date.now();\n      this.$forceUpdate();\n      localStorage.setItem('events', JSON.stringify(this.$store.state.events))\n    },\n    camebackEvent(id) {\n      let index = this.findIndexEvents(id)\n      this.$store.state.events[index].deleted = 0\n      this.$forceUpdate();\n    },\n    changeEvent(id) {\n      let index = this.findIndexEvents(id)\n      let date = new Date(this.$store.state.events[index].dt)\n      this.selectedEventIndex = index\n      if (this.$store.state.events[index].timeStart !== undefined) {\n        let wasDateStart = new Date(this.$store.state.events[index].timeStart)\n        let wasDateEnd = new Date(this.$store.state.events[index].timeEnd)\n        this.startEventTime = wasDateStart.getHours() + \":\" + wasDateStart.getMinutes()\n        this.endEventTime = wasDateEnd.getHours() + \":\" + wasDateEnd.getMinutes()\n        this.datePicker = (new Date(date - (new Date()).getTimezoneOffset() * 60000)).toISOString().substr(0, 10)\n\n        console.log(this.startEventTime)\n        console.log(this.endEventTime)\n        this.isChangeEventWithDuration = true\n\n      } else {\n        this.timePicker = date.getHours() + \":\" + date.getMinutes()\n        this.datePicker = (new Date(date - (new Date()).getTimezoneOffset() * 60000)).toISOString().substr(0, 10)\n        this.isChangeEvent = true\n        this.$forceUpdate();\n      }\n    },\n    saveEventWithDurationChanges() {\n      let startDate = this.makeDate(this.datePicker, this.startEventTime)\n      // let startDate = new Date(this.datePicker + \"T\" + this.startEventTime)\n      let endDate = this.makeDate(this.datePicker, this.endEventTime)\n      // let endDate = new Date(this.datePicker + \"T\" + this.endEventTime)\n\n      this.$store.state.events[this.selectedEventIndex].timeStart = startDate.getTime() + this.$store.state.events[this.selectedEventIndex].dt % 1000\n      this.$store.state.events[this.selectedEventIndex].timeEnd = endDate.getTime() + this.$store.state.events[this.selectedEventIndex].dt % 1000\n      this.$store.state.events[this.selectedEventIndex].dt = this.$store.state.events[this.selectedEventIndex].timeStart\n\n\n      localStorage.setItem('events', JSON.stringify(this.$store.state.events))\n      this.isChangeEventWithDuration = false\n      this.sortEvents()\n    },\n    saveEventChanges() {\n      let date = this.makeDate(this.datePicker, this.timePicker)\n      // let date = new Date(this.datePicker + \"T\" + this.timePicker)\n      this.$store.state.events[this.selectedEventIndex].dt = date.getTime() + this.$store.state.events[this.selectedEventIndex].dt % 1000\n      localStorage.setItem('events', JSON.stringify(this.$store.state.events))\n      this.isChangeEvent = false\n      this.sortEvents()\n    },\n    calcTimePercent(index) {\n      if (this.$store.state.events[index].timeStart === undefined) {\n        return 100\n      }\n      if ((this.$store.state.events[index].timeEnd - this.$store.state.events[index].timeStart)<=0)\n        return 0\n\n      let timeForDay = 0\n      for (let i = 0; i < this.eventsArray.length; i++) {\n        if ((new Date(this.$store.state.events[i].dt)).getDate() === (new Date(this.$store.state.events[index].dt)).getDate()\n            && this.$store.state.events[i].timeStart !== undefined) {\n          timeForDay += this.$store.state.events[i].timeEnd - this.$store.state.events[i].timeStart\n        }\n      }\n      return this.percentOfEventTime = (this.$store.state.events[index].timeEnd - this.$store.state.events[index].timeStart) / timeForDay * 100\n    },\n    borderColorForEvent(index) {\n      // console.log(this.$store.state.events[index].timeStart === undefined ? \"blue\" : \"green\")\n      return this.$store.state.events[index].timeStart === undefined ? \"none\" : \"green\"//rgb(47,101,186)-blue\n    },\n    sortEvents() {\n      this.$store.state.events = this.$store.state.events.slice().sort((a, b) =>\n          a.dt < b.dt ? 1 : -1)\n    },\n\n    isNewDay(index) {\n      if (index === 0) {\n        return true\n      }\n      // console.log(index, (new Date(this.eventsArray[index - 1].dt)).getDate(), (new Date(this.eventsArray[index].dt)).getDate())\n      return (new Date(this.eventsArray[index - 1].dt)).getDate() !== (new Date(this.eventsArray[index].dt)).getDate();\n    },\n\n    printEventDuration(event) {\n      let hours = Math.floor((event.timeEnd - event.timeStart) / (3600000))\n      let minutes = Math.floor((event.timeEnd - event.timeStart) % (3600000) / 60000)\n      minutes = minutes.toString().length === 1 ? '0' + minutes : minutes\n      return hours + \":\" + minutes\n    },\n\n    getHourAndMinutes(event) {\n      let hour = moment(event.dt).hour()\n      let minutes = moment(event.dt).minutes().toString().length === 1 ? \"0\" + moment(event.dt).minutes() : moment(event.dt).minutes()\n      return hour + \":\" + minutes\n    },\n    makeDate(date, time, seconds, milliseconds) {\n      date = date === undefined ? \"\" : date\n      time = time === undefined ? \"\" : \"T\" + time\n      seconds = seconds === undefined ? \"\" : \":\" + seconds\n      milliseconds = milliseconds === undefined ? \"\" : \".\" + milliseconds\n\n      return new Date(date + time + seconds + milliseconds)\n    },\n    findIndexEvents(id) {\n      for (let i = 0; i < this.$store.state.events.length; i++) {\n        if (this.$store.state.events[i].dt === id) {\n          return i\n        }\n      }\n      return -1\n    },\n  }\n}\n</script>\n\n<style scoped>\n\n.picker {\n  color: white;\n  top: 0;\n  bottom: 0;\n  right: 0;\n  left: 0;\n  background-color: rgba(0, 0, 0, 0.5);\n  position: fixed;\n  z-index: 100;\n  overflow: auto;\n  display: flex;\n  padding-top: 80px;\n}\n\n.picker__content {\n  /*overflow-y: scroll;*/\n  display: block;\n  width: 290px;\n  margin: auto;\n\n  min-height: 100%;\n  justify-content: space-between;\n  z-index: 200;\n}\n</style>"]}]}